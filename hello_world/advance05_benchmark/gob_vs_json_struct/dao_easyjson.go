// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gob_vs_json_struct

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7be57abeDecodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark(in *jlexer.Lexer, out *WatchBuy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int(in.Int())
		case "product":
			out.Product = int(in.Int())
		case "anchor":
			out.Anchor = int(in.Int())
		case "pos_x":
			out.PosX = int(in.Int())
		case "pos_y":
			out.PoxY = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7be57abeEncodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark(out *jwriter.Writer, in WatchBuy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Time))
	}
	{
		const prefix string = ",\"product\":"
		out.RawString(prefix)
		out.Int(int(in.Product))
	}
	{
		const prefix string = ",\"anchor\":"
		out.RawString(prefix)
		out.Int(int(in.Anchor))
	}
	{
		const prefix string = ",\"pos_x\":"
		out.RawString(prefix)
		out.Int(int(in.PosX))
	}
	{
		const prefix string = ",\"pos_y\":"
		out.RawString(prefix)
		out.Int(int(in.PoxY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WatchBuy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7be57abeEncodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WatchBuy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7be57abeEncodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WatchBuy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7be57abeDecodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WatchBuy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7be57abeDecodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark(l, v)
}
func easyjson7be57abeDecodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark1(in *jlexer.Lexer, out *AidCache) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aid":
			out.Aid = uint32(in.Uint32())
		case "time_len":
			out.TimeLen = uint32(in.Uint32())
		case "ad_break1":
			out.AdBreak1 = uint32(in.Uint32())
		case "ad_break2":
			out.AdBreak2 = uint32(in.Uint32())
		case "ad_break3":
			out.AdBreak3 = uint32(in.Uint32())
		case "ad_break4":
			out.AdBreak4 = uint32(in.Uint32())
		case "ad_break5":
			out.AdBreak5 = uint32(in.Uint32())
		case "ad_flag":
			out.AdFlag = int(in.Int())
		case "type_id":
			out.TypeId = uint32(in.Uint32())
		case "column_id":
			out.ColumnId = int(in.Int())
		case "ivb_breaks":
			if in.IsNull() {
				in.Skip()
				out.IvbBreaks = nil
			} else {
				in.Delim('[')
				if out.IvbBreaks == nil {
					if !in.IsDelim(']') {
						out.IvbBreaks = make([]uint32, 0, 16)
					} else {
						out.IvbBreaks = []uint32{}
					}
				} else {
					out.IvbBreaks = (out.IvbBreaks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint32
					v1 = uint32(in.Uint32())
					out.IvbBreaks = append(out.IvbBreaks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "upload_qq":
			out.UploadQQ = uint32(in.Uint32())
		case "watch_buys":
			if in.IsNull() {
				in.Skip()
				out.WatchBuys = nil
			} else {
				in.Delim('[')
				if out.WatchBuys == nil {
					if !in.IsDelim(']') {
						out.WatchBuys = make([]WatchBuy, 0, 1)
					} else {
						out.WatchBuys = []WatchBuy{}
					}
				} else {
					out.WatchBuys = (out.WatchBuys)[:0]
				}
				for !in.IsDelim(']') {
					var v2 WatchBuy
					(v2).UnmarshalEasyJSON(in)
					out.WatchBuys = append(out.WatchBuys, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "img_tag":
			if in.IsNull() {
				in.Skip()
				out.ImgTag = nil
			} else {
				in.Delim('[')
				if out.ImgTag == nil {
					if !in.IsDelim(']') {
						out.ImgTag = make([]uint32, 0, 16)
					} else {
						out.ImgTag = []uint32{}
					}
				} else {
					out.ImgTag = (out.ImgTag)[:0]
				}
				for !in.IsDelim(']') {
					var v3 uint32
					v3 = uint32(in.Uint32())
					out.ImgTag = append(out.ImgTag, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cid_status":
			out.CidStatus = uint32(in.Uint32())
		case "no_ad_status":
			out.NoAdStatus = uint32(in.Uint32())
		case "vcom_deal_flag":
			out.VcomDealFlag = uint32(in.Uint32())
		case "pay_status":
			out.PayStatus = uint32(in.Uint32())
		case "resource_type":
			out.ResourceType = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7be57abeEncodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark1(out *jwriter.Writer, in AidCache) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aid\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Aid))
	}
	{
		const prefix string = ",\"time_len\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeLen))
	}
	{
		const prefix string = ",\"ad_break1\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AdBreak1))
	}
	{
		const prefix string = ",\"ad_break2\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AdBreak2))
	}
	{
		const prefix string = ",\"ad_break3\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AdBreak3))
	}
	{
		const prefix string = ",\"ad_break4\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AdBreak4))
	}
	{
		const prefix string = ",\"ad_break5\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AdBreak5))
	}
	{
		const prefix string = ",\"ad_flag\":"
		out.RawString(prefix)
		out.Int(int(in.AdFlag))
	}
	{
		const prefix string = ",\"type_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TypeId))
	}
	{
		const prefix string = ",\"column_id\":"
		out.RawString(prefix)
		out.Int(int(in.ColumnId))
	}
	{
		const prefix string = ",\"ivb_breaks\":"
		out.RawString(prefix)
		if in.IvbBreaks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.IvbBreaks {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"upload_qq\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UploadQQ))
	}
	{
		const prefix string = ",\"watch_buys\":"
		out.RawString(prefix)
		if in.WatchBuys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.WatchBuys {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"img_tag\":"
		out.RawString(prefix)
		if in.ImgTag == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.ImgTag {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cid_status\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CidStatus))
	}
	{
		const prefix string = ",\"no_ad_status\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.NoAdStatus))
	}
	{
		const prefix string = ",\"vcom_deal_flag\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.VcomDealFlag))
	}
	{
		const prefix string = ",\"pay_status\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PayStatus))
	}
	{
		const prefix string = ",\"resource_type\":"
		out.RawString(prefix)
		out.Int32(int32(in.ResourceType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AidCache) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7be57abeEncodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AidCache) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7be57abeEncodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AidCache) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7be57abeDecodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AidCache) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7be57abeDecodeGithubComForrestSuGoLearnHelloWorldAdvance05Benchmark1(l, v)
}
